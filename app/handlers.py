from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery


import app.keyboards as kb
from app.database.requests import get_subject

router = Router()

@router.message(CommandStart()) #–ü—Ä–∏–≤–µ—Ç—Å–≤–∏–µ, –æ—Ç–≤–µ—Ç –Ω–∞ /start
async def handle_start(message: types.Message):
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}", reply_markup=kb.main)
    await message.answer(text=f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>—Å—Ç—É–¥–µ–Ω—Ç—ã</b>.", reply_markup=kb.main)

@router.message(Command("help")) #–û—Ç–≤–µ—Ç –Ω–∞ help
async def hanle_hepl(message: types.message):
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç, —è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–æ—Ç. –° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å.\n")

@router.message(F.text == '–ß—Ç–æ —è —É–º–µ—é?')
async def fun1(message: types.message):
    await message.answer(text="–î–æ—Ä–æ–≥–æ–π —Å—Ç—É–¥–µ–Ω—Ç, —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –∏ –±–∞–ª–ª—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.")

@router.message(F.text == '–°—Ç—É–¥–µ–Ω—Ç—ã')
async def student(message: types.message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=await kb.students())


@router.callback_query(F.data.startswith('student_'))
async def student_selected(callback: CallbackQuery):
    student_id = callback.data.split('_')[1]
    await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}.\n\n')
    await callback.message.answer(f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:</b>', reply_markup=await kb.subjects(student_id))
    await callback.answer('')


@router.callback_query(F.data.startswith('subject_'))
async def subject_selected(callback: CallbackQuery):
    subject_id = callback.data.split('_')[1]
    subject = await get_subject(subject_id=subject_id)

    if subject.point < 20:
        message = '–ü–æ—Ä–∞ –ø–æ—Ç—Ä—É–¥–∏—Ç—å—Å—è!'
    else:
        message = '–¢—ã –º–æ–ª–æ–¥–µ—Ü!'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    await callback.message.answer(
        f'–ü—Ä–µ–¥–º–µ—Ç: <b>{subject.name} üìö</b>\n\n–ë–∞–ª–ª: <b>{subject.point} üíØ- {message}</b>\n\n–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: <b>{subject.attendance}% üî•</b>')
    await callback.answer('')

@router.callback_query(F.data.startswith('back_to_subject'))
async def back_to_subject(callback: CallbackQuery):
    student_id = callback.message.text.split()[2]  # –ü–æ–ª—É—á–µ–Ω–∏–µ student_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    await callback.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:</b>', reply_markup=await kb.subjects(student_id))
    await callback.answer('')








